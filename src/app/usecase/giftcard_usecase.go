package usecase

import (
	customerrors "GiftWize/src/app"
	"GiftWize/src/entity/request"
	"GiftWize/src/entity/response"
	"GiftWize/src/infreaestructure/repository"
	"GiftWize/src/shared/generators"
	"context"
	"errors"
	"fmt"
	"math/rand"
	"time"

	"github.com/google/uuid"
	"github.com/sirupsen/logrus"
	"gorm.io/gorm" // Added gorm import
)

// IGiftCardUseCase defines the interface for gift card use case operations.
type IGiftCardUseCase interface {
	GenerateGiftCardNumber(ctx context.Context) (string, error)
	CreateGiftCard(ctx context.Context, data request.CreateGiftCardRequest) error
	GetAllGiftCardList(ctx context.Context) ([]response.GetAllGiftCardResponse, error)
	GetGiftCardByID(ctx context.Context, id string) (response.GetAllGiftCardResponse, error) // id here is the Code
	UpdateGiftCard(ctx context.Context, id string, data request.UpdateGiftCardRequest) error // id here is the Code
	FullTextSearchGiftCard(ctx context.Context, query string) ([]response.GetAllGiftCardResponse, error)
	DeleteGiftCard(ctx context.Context, id string) error // id here is the Code
	UseGiftCardAmount(ctx context.Context, giftCardNumber string, amount float64) (response.UseGiftCardAmountResponse, error)
}

type GiftCardUseCase struct {
	giftCardRepo repository.IGiftCardRepository // Depends on the interface
}

// NewGiftCardUseCase creates a new GiftCardUseCase instance.
// It accepts IGiftCardRepository and returns IGiftCardUseCase.
func NewGiftCardUseCase(giftCardRepo repository.IGiftCardRepository) IGiftCardUseCase {
	return &GiftCardUseCase{
		giftCardRepo: giftCardRepo,
	}
}

// Ensure GiftCardUseCase implements IGiftCardUseCase
var _ IGiftCardUseCase = (*GiftCardUseCase)(nil)

// This is the actual implementation, the empty one above will be removed.
func (c *GiftCardUseCase) GenerateGiftCardNumber(ctx context.Context) (string, error) {
	log := logrus.WithContext(ctx)
	log.Info("GenerateGiftCardNumber use case")

	const (
		giftcardLength = 16
		maxAttempts    = 100
		prefix         = "GC"
	)

	r := rand.New(rand.NewSource(time.Now().UnixNano()))

	for attempts := 0; attempts < maxAttempts; attempts++ {
		giftCardNumber := generators.GenerateGiftcardNumber(giftcardLength, prefix)
		exists, err := c.giftCardRepo.GiftCardNumberExists(ctx, giftCardNumber)
		if err != nil {
			log.Errorf("Error checking gift card number existence: %v", err)
			return "", err
		}
		if !exists {
			return giftCardNumber, nil
		}
		log.Info("Gift card number already exists, retrying...")
		time.Sleep(time.Duration(r.Intn(100)) * time.Millisecond)
	}

	log.Errorf("No unique gift card number could be generated after %d attempts", maxAttempts)
	return "", errors.New("no se pudo generar un número único después de los intentos máximos")
}

func (g *GiftCardUseCase) CreateGiftCard(ctx context.Context, data request.CreateGiftCardRequest) error {
	log := logrus.WithContext(ctx)
	log.Info("CreateGiftCard use case")

	// The 'Code' field in models.GiftCard is marked as "unique;not null".
	// It should be generated here, similar to how giftCardNumber is generated, or passed in.
	// For now, assuming it might be part of what CreateGiftCard in repository handles,
	// or it's auto-generated by DB if not provided and GORM is configured for default UUIDs.
	// The existing CreateGiftCard in repo takes a 'uuid' param - this should be the 'Code'.
	// Let's generate a UUID for the 'Code' field.
	generatedCode, err := uuid.NewRandom() // Generates a random UUID
	if err != nil {
		log.Errorf("Error generating UUID for Code: %v", err)
		return err
	}
	giftCardCode := generatedCode.String()

	giftCardNumber, err := g.GenerateGiftCardNumber(ctx)
	if err != nil {
		log.Errorf("Error generating gift card number: %v", err)
		return err
	}

	// Pass giftCardCode as the 'uuid' parameter to the repository, which maps to 'Code' in the DB model
	err = g.giftCardRepo.CreateGiftCard(ctx, data, giftCardCode, giftCardNumber)
	if err != nil {
		log.Errorf("Error creating gift card: %v", err)
		return err
	}

	log.Info("Gift card created successfully")
	return nil
}

func (g *GiftCardUseCase) GetAllGiftCardList(ctx context.Context) ([]response.GetAllGiftCardResponse, error) {
	log := logrus.WithContext(ctx)
	log.Info("GetAllGiftCardList use case")

	results, err := g.giftCardRepo.GetAllGiftCardList(ctx)
	if err != nil {
		log.Errorf("Error getting gift card list: %v", err)
		return []response.GetAllGiftCardResponse{}, err
	}
	log.Info("Lista de tarjetas de regalo recuperada exitosamente")

	var responseList []response.GetAllGiftCardResponse
	for _, giftCard := range results {
		responseItem := response.GetAllGiftCardResponse{
			ID:             giftCard.ID,
			Type:           giftCard.Type,
			Balance:        giftCard.Balance,
			GiftCardNumber: giftCard.GiftCardNumber,
			ExpirationDate: giftCard.ExpirationDate.Format("2006-01-02"),
			Status:         giftCard.Status,
			IsPromotional:  giftCard.IsPromotional,
		}
		responseList = append(responseList, responseItem)
	}

	return responseList, nil
}

func (g *GiftCardUseCase) GetGiftCardByID(ctx context.Context, id string) (response.GetAllGiftCardResponse, error) {
	log := logrus.WithContext(ctx)
	log.Info("GetGiftCardByID use case") // This ID is the gift card code (string)

	giftCard, err := g.giftCardRepo.GetGiftCardByCode(ctx, id) // Use GetGiftCardByCode
	if err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			log.Warnf("Gift card with code %s not found: %v", id, err)
			return response.GetAllGiftCardResponse{}, customerrors.ErrGiftCardNotFound
		}
		log.Errorf("Error getting gift card by code %s: %v", id, err)
		return response.GetAllGiftCardResponse{}, err
	}
	if giftCard == nil { // Should be redundant if gorm.ErrRecordNotFound is handled
		log.Warnf("Gift card with code %s not found (nil returned)", id)
		return response.GetAllGiftCardResponse{}, customerrors.ErrGiftCardNotFound
	}

	responseItem := response.GetAllGiftCardResponse{
		ID:             giftCard.ID,
		GiftCardNumber: giftCard.GiftCardNumber,
		Type:           giftCard.Type,
		Balance:        giftCard.Balance,
		ExpirationDate: giftCard.ExpirationDate.Format("2006-01-02"),
		Status:         giftCard.Status,
		IsPromotional:  giftCard.IsPromotional,
	}

	log.Info("Gift card retrieved successfully")
	return responseItem, nil
}

func (g *GiftCardUseCase) UpdateGiftCard(ctx context.Context, id string, data request.UpdateGiftCardRequest) error {
	log := logrus.WithContext(ctx)
	log.Info("UpdateGiftCard use case")

	log.Info("UpdateGiftCard use case") // id is the gift card code (string)

	// First, check if the gift card exists by its code
	existingGiftCard, err := g.giftCardRepo.GetGiftCardByCode(ctx, id)
	if err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			log.Warnf("Gift card with code %s not found for update: %v", id, err)
			return customerrors.ErrGiftCardNotFound
		}
		log.Errorf("Error fetching gift card with code %s for update: %v", id, err)
		return err // Other DB error
	}
	if existingGiftCard == nil { // Should be redundant if gorm.ErrRecordNotFound is handled
		log.Warnf("Gift card with code %s not found for update (nil returned)", id)
		return customerrors.ErrGiftCardNotFound
	}

	err = g.giftCardRepo.UpdateGiftCard(ctx, id, data) // id is the code
	if err != nil {
		log.Errorf("Error updating gift card: %v", err)
		return err
	}

	log.Info("Gift card updated successfully")

	return nil
}

func (g *GiftCardUseCase) FullTextSearchGiftCard(ctx context.Context, query string) ([]response.GetAllGiftCardResponse, error) {
	log := logrus.WithContext(ctx)
	log.Info("FullTextSearchGiftCard use case")

	results, err := g.giftCardRepo.FullTextSearchGiftCard(ctx, query)
	if err != nil {
		log.Errorf("Error searching gift card: %v", err)
		return []response.GetAllGiftCardResponse{}, err
	}

	var responseList []response.GetAllGiftCardResponse
	for _, giftCard := range results {
		responseItem := response.GetAllGiftCardResponse{
			ID:             giftCard.ID,
			GiftCardNumber: giftCard.GiftCardNumber,
			Type:           giftCard.Type,
			Balance:        giftCard.Balance,
			ExpirationDate: giftCard.ExpirationDate.Format("2006-01-02"),
			Status:         giftCard.Status,
			IsPromotional:  giftCard.IsPromotional,
		}
		responseList = append(responseList, responseItem)
	}

	log.Info("Gift card search results retrieved successfully")
	return responseList, nil
}

func (g *GiftCardUseCase) DeleteGiftCard(ctx context.Context, id string) error {
	log := logrus.WithContext(ctx)
	log.Info("DeleteGiftCard use case") // id is the gift card code (string)

	// First, check if the gift card exists by its code
	existingGiftCard, err := g.giftCardRepo.GetGiftCardByCode(ctx, id)
	if err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			log.Warnf("Gift card with code %s not found for delete: %v", id, err)
			return customerrors.ErrGiftCardNotFound
		}
		log.Errorf("Error fetching gift card with code %s for delete: %v", id, err)
		return err // Other DB error
	}
	if existingGiftCard == nil { // Should be redundant if gorm.ErrRecordNotFound is handled
		log.Warnf("Gift card with code %s not found for delete (nil returned)", id)
		return customerrors.ErrGiftCardNotFound
	}

	err = g.giftCardRepo.DeleteGiftCard(ctx, id) // id is the code
	if err != nil {
		log.Errorf("Error deleting gift card: %v", err)
		return err
	}

	log.Info("Gift card deleted successfully")
	return nil
}

func (g *GiftCardUseCase) UseGiftCardAmount(ctx context.Context, giftCardNumber string, amount float64) (response.UseGiftCardAmountResponse, error) {
	log := logrus.WithContext(ctx)
	log.Info("UseGiftCardAmount use case")

	response := response.UseGiftCardAmountResponse{IsUsed: false} // Default to IsUsed: false
	log.Debugf("Attempting to use amount %.2f from gift card %s", amount, giftCardNumber)

	// 1. Retrieve the gift card
	giftCard, err := g.giftCardRepo.GetByGiftCardNumber(ctx, giftCardNumber)
	if err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			log.Warnf("Gift card %s not found: %v", giftCardNumber, err)
			response.Message = "Gift card not found."
			return response, customerrors.ErrGiftCardNotFound
		}
		log.Errorf("Error retrieving gift card %s: %v", giftCardNumber, err)
		response.Message = "Error retrieving gift card."
		return response, err // DB or other unexpected error
	}
	// giftCard is a pointer, check for nil though gorm.ErrRecordNotFound should catch it.
	if giftCard == nil {
		log.Warnf("Gift card %s not found (nil returned)", giftCardNumber)
		response.Message = "Gift card not found."
		return response, customerrors.ErrGiftCardNotFound
	}

	response.Balance = giftCard.Balance // Populate current balance for all responses

	// 2. Check if the gift card Status is "active"
	if giftCard.Status != "active" { // TODO: Use constants for statuses
		log.Warnf("Gift card %s is not active. Current status: %s", giftCardNumber, giftCard.Status)
		response.Message = fmt.Sprintf("Gift card is not active. Status: %s.", giftCard.Status)
		return response, customerrors.ErrGiftCardNotActive
	}

	// 3. Check if the ExpirationDate has passed
	if time.Now().After(giftCard.ExpirationDate) {
		log.Warnf("Gift card %s has expired on %s", giftCardNumber, giftCard.ExpirationDate.Format("2006-01-02"))
		// Persist this status change
		if updateErr := g.giftCardRepo.UpdateGiftCardBalanceAndStatus(ctx, giftCard.Code, giftCard.Balance, "expired"); updateErr != nil {
			log.Errorf("Failed to update status to 'expired' for gift card %s (code: %s): %v", giftCardNumber, giftCard.Code, updateErr)
			// Log the error but still return the primary error for this path
		}
		response.Message = "Gift card has expired."
		return response, customerrors.ErrGiftCardExpired
	}

	// 4. Check if giftCard.Balance is sufficient
	if giftCard.Balance < amount {
		log.Warnf("Insufficient balance in gift card %s. Has: %.2f, Tried: %.2f", giftCardNumber, giftCard.Balance, amount)
		response.Message = "Insufficient balance."
		// response.Balance is already set
		return response, customerrors.ErrInsufficientBalance
	}

	// 5. Deduct the amount
	newBalance := giftCard.Balance - amount
	log.Infof("Deducted %.2f from gift card %s. New balance: %.2f", amount, giftCardNumber, newBalance)

	// 6. If balance becomes 0, update status
	newStatus := giftCard.Status
	if newBalance == 0 {
		newStatus = "used" // TODO: Use constants for statuses
		log.Infof("Gift card %s balance is now 0. Setting status to '%s'", giftCardNumber, newStatus)
	}

	// 7. Persist changes (balance and potentially status)
	if err := g.giftCardRepo.UpdateGiftCardBalanceAndStatus(ctx, giftCard.Code, newBalance, newStatus); err != nil {
		log.Errorf("Failed to update balance/status for gift card %s (code: %s): %v", giftCardNumber, giftCard.Code, err)
		response.Message = "Failed to update gift card after use."
		// Return current balance before attempted deduction, as the transaction failed
		return response, err
	}

	// 8. Return success response
	response.Balance = newBalance
	response.IsUsed = true
	response.Message = "Gift card amount used successfully."
	log.Infof("Successfully used %.2f from gift card %s. Remaining balance: %.2f", amount, giftCardNumber, newBalance)
	return response, nil
}
